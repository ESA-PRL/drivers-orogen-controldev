name "controldev"
version "0.0"

using_library "controldev"
using_library "canbus"
using_task_library "canbus"
import_types_from "base"
import_types_from "ControlDevTypes.hpp"
import_types_from "canbus"
task_context "GenericTask" do
    abstract

    property("axisScale","/std/vector<double>")
    
    property("axisPorts", "std::vector<controldev::AxisPort>")

    output_port("raw_command", "controldev/RawCommand").
        doc("Port for raw command structures (composed of joystick and sliderbox values)")

end

task_context "JoystickTask" do
    subclasses "GenericTask"

    doc("A Task that provides a joystick driver")

    default_activity :fd_driven
    needs_configuration

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joystick device")

end

task_context "Mouse3DTask" do
    subclasses "GenericTask"

    doc("A Task that provides a 3D Mouse \"3DConnexion\" driver")

    default_activity :fd_driven
    needs_configuration

end

task_context "SteeringWheelTask" do
    subclasses "GenericTask"

    doc("A Task that provides a SteeringWheel driver")

    default_activity :fd_driven
    needs_configuration
end

task_context "SliderboxTask" do
    subclasses "GenericTask"

    doc("A Task that provides a SliderBox driver")

    default_activity :fd_driven
    needs_configuration

    property("device", "/std/string", "/dev/input/js0").
        doc("Path to the joystick device")
end

# This task converts controldev/RawCommand to base/MotionCommand2D
# with configurable axes, ranges and deadzones
task_context "GenericRawToMotion2D" do
    property("rotation_axis", "int").doc("Rotation axis as reported by controldev(main and sub axis)")
    property("heading_axis_x", "int").doc("heading X (Heading is Angle of Vector between x,y)")
    property("heading_axis_y", "int").doc("heading Y (Heading is Angle of Vector between x,y)")
    property("translation_axis", "int").doc("Translation Axis")
    property("invert_rotation_axis", "bool", 0).doc("Invert Axis, default false")
    property("invert_heading_axis_x", "bool", 0).doc("Invert Axis, default false")
    property("invert_heading_axis_y", "bool", 0).doc("Invert Axis, default false")
    property("invert_translation_axis", "bool", 0).doc("Invert Axis, default false")
    property("maxSpeed", "double", 1.0).doc("Maximum speed in m/s")
    property("maxRotationSpeed", "double", Math::PI / 2).doc("Maximum rotational velocity in rad/s")
    property("heading_axis_x_deadzone", "double", 0.02).doc("heading axis X deadzone (range 0-1)")
    property("heading_axis_y_deadzone", "double", 0.02).doc("heading_axis Y deadzone (range 0-1)")
    property("rotation_axis_deadzone", "double", 0.02).doc("Rotation axis deadzone (range 0-1)")
    property("translation_axis_deadzone", "double", 0.02).doc("Translation axis deadzone (range 0-1)")
    # Allows to set the control mode. Default is Control: device commands are forwarded.
    # ControlOff: Sends zero commands. KeepAlive: Sends NaN commands, this can be used as a dead man's switch.
    property("control_mode", "controldev/ControlMode", :Control)
    # If set those bottons allow to change the control mode.
    property("botton_mapping", "controldev/ButtonMapping")

    input_port "raw_command", "controldev/RawCommand"
    output_port "motion_command", "base/commands/Motion2D"

    port_driven :raw_command
end
     

if has_typekit?('canbus')
import_types_from "canbus"
task_context "Remote" do
    subclasses "GenericTask"

    doc("A Task that receives CAN messages and converts them into raw-commands")

    needs_configuration

    input_port("canInputDevice", "canbus/Message").
        doc("Input port for generic messegen from inputdevices").
        needs_reliable_connection

    port_driven
end
else
    STDERR.puts "WARN: the Remote task will be disabled as the canbus orogen component is not present"
end

